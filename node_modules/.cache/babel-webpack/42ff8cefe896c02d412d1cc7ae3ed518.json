{"ast":null,"code":"import { ConfigService } from \"../services/initialize.service\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/initialize.service\";\nexport class RealSubject {\n  request() {\n    return true;\n  }\n\n  secondRequest() {\n    return true;\n  }\n\n}\nexport class proxied {\n  constructor(id) {\n    this.id = id;\n    return {\n      \"id\": this.id\n    };\n  }\n\n}\nexport let Proxy = /*#__PURE__*/(() => {\n  class Proxy {\n    constructor(realSubject, prox, httpService) {\n      this.prox = prox;\n      this.httpService = httpService; //private http!: HttpClient;\n\n      this.url = '';\n      this.realSubject = realSubject;\n      this.data = prox;\n    }\n\n    request() {\n      var iser = this.checkAccess();\n      console.log(\"i'm iser: \" + iser);\n\n      if (iser) {\n        console.log(\"i must call logaccess\");\n        this.logAccess();\n        return this.realSubject.request();\n      } else {\n        return false;\n      }\n    }\n\n    secondRequest() {\n      if (this.status) {\n        this.realSubject.request();\n      }\n    }\n\n    checkAccess() {\n      console.log(\"hi,i'm checkAcces, my data: \" + JSON.stringify(this.data));\n      var toid = this.data; //console.log(this.http.post(tourl,toid));\n\n      try {\n        console.log(toid);\n        this.response = this.httpService.postAccess(toid); //.postAccess(toid);\n\n        console.log(\"my answer: \");\n        console.log(this.response); //this.response = this.http.get<isInTable>(this.url+this.data.id);\n\n        this.status = this.response.is; //response = JSON.stringify(response.getContentText());\n        //response.slice(response.lastIndexOf(\"is\")).substr(2, 20).includes(\"true\");\n\n        return this.status;\n      } catch (er) {\n        console.log(er);\n        return false;\n      }\n    }\n\n    logAccess() {\n      console.log(this.data.id);\n      console.log(this.response);\n      console.log(this.status);\n    }\n\n  }\n\n  Proxy.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: Proxy,\n    factory: Proxy.ɵfac,\n    providedIn: 'root'\n  });\n\n  Proxy.ɵfac = function Proxy_Factory(t) {\n    return new (t || Proxy)(i0.ɵɵinject(RealSubject), i0.ɵɵinject(proxied), i0.ɵɵinject(i1.ConfigService));\n  };\n\n  Proxy.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n    type: Proxy\n  });\n  Proxy.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n    providers: [ConfigService]\n  });\n  return Proxy;\n})();\nexport function isBoardFirst(subject) {\n  console.log(subject.request());\n  return subject.request();\n}\nexport function isBoard(subject) {\n  return subject.secondRequest();\n}","map":null,"metadata":{},"sourceType":"module"}